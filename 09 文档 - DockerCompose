Docker部署步骤：
一、构建centos-jdk镜像

二、构建mysql-java镜像

三、创建dfWeiji文件夹
将下列文件复制进去
entrypoint.sh  weiji-config-0.0.1.jar  weiji-customer-0.0.1.jar  weiji-eureka-0.0.1.jar  weiji-order-0.0.1.jar  weiji-service-0.0.1.jar

四、docker-compose（启动方式一）
1. 编写若干个Dockerfile-XXX文件，并将各自内容复制进去
# ----------------------------------Dockerfile-eureka--------------------------------------------
# 基础镜像
FROM centos-jdk
# 挂载点
VOLUME /tmp
# 复制文件
ADD ./dfWeiji/weiji-eureka-0.0.1.jar app.jar
# 延迟插件启动
ADD ./dfWeiji/entrypoint.sh ./
RUN chmod +x ./entrypoint.sh
# 执行后面命令
RUN sh -c 'touch /app.jar'
# 配置容器启动后执行的命令
ENTRYPOINT  ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
# 声明端口（不会打开端口）
EXPOSE 6001
# ----------------------------------Dockerfile-config--------------------------------------------
FROM centos-jdk
VOLUME /tmp
ADD ./dfWeiji/weiji-config-0.0.1.jar app.jar
ADD ./dfWeiji/entrypoint.sh ./
RUN chmod +x ./entrypoint.sh
RUN sh -c 'touch /app.jar'
ENTRYPOINT  ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
EXPOSE 6501
# ----------------------------------Dockerfile-service--------------------------------------------
FROM centos-jdk
VOLUME /tmp
ADD ./dfWeiji/weiji-service-0.0.1.jar app.jar
ADD ./dfWeiji/entrypoint.sh ./
RUN chmod +x ./entrypoint.sh
RUN sh -c 'touch /app.jar'
ENTRYPOINT  ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
EXPOSE 8002
# ----------------------------------Dockerfile-order--------------------------------------------
FROM centos-jdk
VOLUME /tmp
ADD ./dfWeiji/weiji-order-0.0.1.jar app.jar
ADD ./dfWeiji/entrypoint.sh ./
RUN chmod +x ./entrypoint.sh
RUN sh -c 'touch /app.jar'
ENTRYPOINT  ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
EXPOSE 8012
# ----------------------------------Dockerfile-customer--------------------------------------------
FROM centos-jdk
VOLUME /tmp
ADD ./dfWeiji/weiji-customer-0.0.1.jar app.jar
ADD ./dfWeiji/entrypoint.sh ./
RUN chmod +x ./entrypoint.sh
RUN sh -c 'touch /app.jar'
ENTRYPOINT  ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
EXPOSE 7001

2. 编写docker-compose.yml
version: '3.0'
services:
  eureka-server:      #自定义服务名
    build:
      dockerfile: ./Dockerfile-eureka
      context: .
    image: weiji-eureka   #镜像名称
    ports:
      - "6001:6001"    #映射的端口
    networks:
      eureka-net:     #网络模式
        aliases:
          - eureka6001.com
    tty: true
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  config:
    build:
      dockerfile: ./Dockerfile-config
      context: .
    image: weiji-config
    ports:
      - "6501:6501"
    networks:
      eureka-net:
        aliases:
          - weiji-config
    tty: true
    # http://config6501.com:6501/config/weiji-eureka-dev.yml 试着判断config是否可以访问
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:
      - TZ=Asia/Shanghai
  weiji-customer:
    build:
      dockerfile: ./Dockerfile-customer
      context: .
    image: weiji-customer
    ports:
      - "7001:7001"
    networks:
      eureka-net:
        aliases:
          - weiji-customer
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:
      - TZ=Asia/Shanghai
  weiji-service:
    build:
      dockerfile: ./Dockerfile-service
      context: .
    image: weiji-service
    ports:
      - "8002:8002"
    networks:
      eureka-net:
        aliases:
          - weiji-service
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:
      - TZ=Asia/Shanghai
  weiji-order:
    build:
      dockerfile: ./Dockerfile-order
      context: .
    image: weiji-order
    ports:
      - "8012:8012"
    networks:
      eureka-net:
        aliases:
          - weiji-order
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:
      - TZ=Asia/Shanghai
  nginx-server1:
    image: nginx
    ports:
      - "80:80"
    networks:
      eureka-net:
        aliases:
          - nnnnnnnnnnnnnnnn
    volumes:
      - /etc/yum.repos.d/:/etc/yum.repos.d/
    environment:
      - TZ=Asia/Shanghai
networks:
  eureka-net:
#     driver: bridge

3. 注意docker-compose.yml 和 Dockerfile-config、Dockerfile-XXX 放在dfWeiji文件夹的上一级

4. 执行docker-compose.yml
docker-compose down                 # 停止服务，删除容器【注意:如何网络中有如mysql服务，down之后会报错，不用管它，是因为down会删除网络，但是mysql不在docker-compose中】
docker-compose build                # 重新编译所有jar，重新生成镜像
docker-compose build weiji-service  # 编译某个jar，重新生成镜像
docker-compose -f docker-compose.yml up -d  # 启动【无镜像时，先jar打成镜像，再启动】【有镜像时，会直接启动】

四、 手动逐一启动（启动方式二）【老版本，作废】
1. 创建网桥
docker network create default_network
docker network  ls
2. 启动项目
docker run -d --name config -p 6501:6501 --network eureka-net --network-alias config6501.com 7d3a880c29cb
docker run -d --name eureka -p 6001:6001 --network eureka-net --network-alias eureka6001.com c39ac97db077
docker ps
docker logs --since 2020-07-17T11:06 7c

五、查看eureka日志（eureka要等待config启动结束处于监听状态时，端口是通的，再启动，如果eureka没报错，则config和eureka均启动成功）
docker ps
docker logs --since 2020-07-26T21:51:00 0c4acd9c207a
或
docker inspect --format '{{.LogPath}}' mysql-java
cat ...




项目重新打包
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi weiji-customer-0.0.1
docker rmi weiji-service-0.0.1
docker rmi weiji-order-0.0.1
docker rmi weiji-config-0.0.1
docker rmi weiji-eureka-0.0.1




