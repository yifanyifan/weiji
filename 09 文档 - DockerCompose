Docker部署步骤：
一、构建centos-java镜像

二、构建mysql-java镜像

三、docker-compose（启动方式一）
1. 编写docker-compose.yml
version: '3.0'
services:
  config:        #自定义服务名
    image: weiji-config-0.0.1    #镜像名称
    ports:
      - "6501:6501"    #映射的端口
    # links:
    #   - eureka-server1:eureka6001.com
    networks:
      eureka-net:     #网络模式
        aliases:
          - config6501.com
    #extra_hosts:
    #   - eureka6001.com:47.103.28.119
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  eureka-server:      #自定义服务名
    image: weiji-eureka-0.0.1   #镜像名称
    ports:
      - "6001:6001"    #映射的端口
    #depends_on:
    #  - config
    networks:
      eureka-net:     #网络模式
        aliases:
          - eureka6001.com
    # volumes: - "./entrypoint.sh:/entrypoint.sh"
    # environment: SLEEP_SECOND: 4
    tty: true
    # http://config6501.com:6501/config/weiji-eureka-dev.yml 试着判断config是否可以访问
    entrypoint: /entrypoint.sh -d config6501.com:6501 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    # command: ["./wait-for-it.sh", "-t", "10", "config6501.com:6501/config/weiji-eureka-dev.yml", "--", "java", "-jar", "/app.jar"]
    #restart: always
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  weiji-customer:      #自定义服务名
    image: weiji-customer-0.0.1   #镜像名称
    ports:
      - "7001:7001"    #映射的端口
    networks:
      eureka-net:     #网络模式
        aliases:
          - weiji-customer
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  weiji-service:      #自定义服务名
    image: weiji-service-0.0.1   #镜像名称
    ports:
      - "8002:8002"    #映射的端口
    networks:
      eureka-net:     #网络模式
        aliases:
          - weiji-service
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  weiji-service2:      #自定义服务名
    image: weiji-service-0.0.1   #镜像名称
    ports:
      - "8003:8002"    #映射的端口
    networks:
      eureka-net:     #网络模式
        aliases:
          - weiji-service
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  weiji-order:      #自定义服务名
    image: weiji-order-0.0.1   #镜像名称
    ports:
      - "8012:8012"    #映射的端口
    networks:
      eureka-net:     #网络模式
        aliases:
          - weiji-order
    tty: true
    entrypoint: /entrypoint.sh -d eureka6001.com:6001 -c 'java -Djava.security.egd=file:/dev/./urandom -jar /app.jar';
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
  nginx-server1:
    image: nginx
    ports:
      - "80:80"
    networks:
      eureka-net:     #网络模式
        aliases:
          - nnnnnnnnnnnnnnnn
    volumes:
      - /etc/yum.repos.d/:/etc/yum.repos.d/
    environment:       #环境变量配置
      - TZ=Asia/Shanghai
networks:
  eureka-net:
#     driver: bridge

2. 执行docker-compose.yml
docker-compose -f docker-compose.yml up -d

四、 手动逐一启动（启动方式二）
1. 创建网桥
docker network create default_network
docker network  ls
2. 启动项目
docker run -d --name config -p 6501:6501 --network eureka-net --network-alias config6501.com 7d3a880c29cb
docker run -d --name eureka -p 6001:6001 --network eureka-net --network-alias eureka6001.com c39ac97db077
docker ps
docker logs --since 2020-07-17T11:06 7c

五、查看eureka日志（eureka要等待config启动结束处于监听状态时，端口是通的，再启动，如果eureka没报错，则config和eureka均启动成功）
docker ps
docker logs --since 2020-07-26T21:51:00 0c4acd9c207a
或
docker inspect --format '{{.LogPath}}' mysql-java
cat ...




项目重新打包
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi weiji-customer-0.0.1
docker rmi weiji-service-0.0.1
docker rmi weiji-order-0.0.1
docker rmi weiji-config-0.0.1
docker rmi weiji-eureka-0.0.1




